from __future__ import annotations

import logging
from pathlib import Path
from typing import Optional

import pandas as pd

from backend.rl.envs import CarbonAwareEnv

logger = logging.getLogger(__name__)


def evaluate_schedule(schedule_path: Path) -> dict[str, float]:
    """Evaluate a precomputed schedule CSV and return summary metrics."""
    df = pd.read_csv(schedule_path)
    required_columns = {"timestamp", "scheduled_energy_kwh", "carbon_intensity_gco2_per_kwh"}
    if not required_columns.issubset(df.columns):
        raise ValueError(
            f"Schedule must contain columns: {', '.join(sorted(required_columns))}"
        )

    energy = df["scheduled_energy_kwh"].astype(float).to_numpy()
    carbon = df["carbon_intensity_gco2_per_kwh"].astype(float).to_numpy()
    env = CarbonAwareEnv(carbon, float(energy.sum()), float(energy.max()))

    env.reset()
    total_emissions = 0.0
    for hour in range(len(energy)):
        result = env.step(float(energy[hour]))
        total_emissions += result.emissions

    average_intensity = (
        df.loc[df["scheduled_energy_kwh"] > 0, "carbon_intensity_gco2_per_kwh"].mean()
    )

    return {
        "total_energy_kwh": float(energy.sum()),
        "total_emissions_kg": float(total_emissions),
        "average_operating_intensity": float(average_intensity or 0.0),
        "hours": int(len(df)),
    }


def main(schedule: str | Path) -> None:
    """Simple CLI wrapper to print evaluation metrics for a schedule file."""
    schedule_path = Path(schedule)
    if not schedule_path.exists():
        raise FileNotFoundError(schedule_path)
    metrics = evaluate_schedule(schedule_path)
    for key, value in metrics.items():
        logger.info("%s: %s", key, value)


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        description="Evaluate an RL schedule generated by train_ppo."
    )
    parser.add_argument("schedule", help="Path to the schedule CSV to evaluate.")
    args = parser.parse_args()
    logging.basicConfig(level=logging.INFO, format="%(message)s")
    main(args.schedule)
